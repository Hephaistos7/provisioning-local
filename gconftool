#!/usr/bin/python

import json
import re
import subprocess
from subprocess import call

from ansible.module_utils.basic import *

def _escape_single_quotes(string):
    return re.sub("'", r"'\''", string)

def _set_value(user, key, value, type):

    command = " ".join([
        '/usr/bin/gconftool-2 --set {} --type {} {}'.format(_escape_single_quotes(key), type, value),
    ])

    return subprocess.check_output([
        'su', '-', user , '-c', command
    ]).strip()

def _get_value(user, key):

    return subprocess.check_output(['su', '-',  user , '-c', '/usr/bin/gconftool-2 --get {}'.format(_escape_single_quotes(key))]).strip()

def main():

    module = AnsibleModule(
        argument_spec = {
            'state': { 'choices': ['present'], 'default': 'present' },
            'type': { 'choices': ['string', 'boolean'], 'default': 'string' },
            'user': { 'required': True },
            'key': { 'required': True },
            'value': { 'required': True },
        },
        supports_check_mode = True,
    )

    params = module.params
    state = module.params['state']
    user = module.params['user']
    type = module.params['type']
    key = module.params['key']
    value = module.params['value']

    old_value = _get_value(user, key)
    changed = old_value != value

    if changed and not module.check_mode:
        _set_value(user, key, value, type)

    print json.dumps({
        'changed': changed,
        'key': key,
        'value': value,
        'old_value': old_value,
    })

main()